import streamlit as st
import pandas as pd
import numpy as np
import pickle
import warnings
warnings.filterwarnings("ignore")

# Streamlit baÅŸlÄ±ÄŸÄ±
st.title('ğŸ“Š Banka Pazarlama Tahmin UygulamasÄ±')

# KullanÄ±cÄ±dan giriÅŸ alÄ±nmasÄ±
age = st.number_input('LÃ¼tfen yaÅŸÄ±nÄ±zÄ± girin:', step=1)

job = st.selectbox(
    'LÃ¼tfen mesleÄŸinizi seÃ§in:',
    ('admin.', 'blue-collar', 'entrepreneur', 'housemaid', 'management', 'retired',
     'self-employed', 'services', 'student', 'technician', 'unemployed', 'unknown')
)

marital = st.selectbox('Medeni durumunuzu seÃ§in:', ('married', 'single', 'divorced'))

education = st.selectbox('EÄŸitim durumunuzu seÃ§in:',
                          ('basic.4y', 'basic.6y', 'basic.9y', 'high.school', 'illiterate',
                           'professional.course', 'university.degree', 'unknown'))

housing = st.selectbox('Konut krediniz var mÄ±?', ('yes', 'no', 'unknown'))

loan = st.selectbox('KiÅŸisel krediniz var mÄ±?', ('yes', 'no', 'unknown'))

day_of_week = st.selectbox('Son iletiÅŸim gÃ¼nÃ¼nÃ¼zÃ¼ seÃ§in:',
                           ('mon', 'tue', 'wed', 'thu', 'fri'))

contact = st.selectbox('Ä°letiÅŸim tÃ¼rÃ¼nÃ¼ seÃ§in:', ('cellular', 'telephone'))

month = st.selectbox('Son iletiÅŸim ayÄ±nÄ± seÃ§in:',
                      ('jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'))

duration = st.number_input('Son gÃ¶rÃ¼ÅŸme sÃ¼resini (saniye) girin:', step=1)

campaign = st.number_input('Kampanya sÄ±rasÄ±nda yapÄ±lan arama sayÄ±sÄ±:', step=1)

cons_price_idx = st.number_input('TÃ¼ketici fiyat endeksini girin:')

cons_conf_idx = st.number_input('TÃ¼ketici gÃ¼ven endeksini girin:')

euribor3m = st.number_input('Euribor 3 aylÄ±k oranÄ±nÄ± girin:')

nr_employed = st.number_input('Ã‡alÄ±ÅŸan sayÄ±sÄ±nÄ± girin:')

# KullanÄ±cÄ±dan alÄ±nan girdilerle bir DataFrame oluÅŸturma
input_data = pd.DataFrame({
    'age': [age],
    'job': [job],
    'marital': [marital],
    'education': [education],
    'housing': [housing],
    'loan': [loan],
    'day_of_week': [day_of_week],
    'contact': [contact],
    'month': [month],
    'duration': [duration],
    'campaign': [campaign],
    'cons.price.idx': [cons_price_idx],
    'cons.conf.idx': [cons_conf_idx],
    'euribor3m': [euribor3m],
    'nr.employed': [nr_employed]
})

# Model yÃ¼kleme
model_path = 'tuned_best_model.pkl'
try:
    model = pickle.load(open(model_path, 'rb'))
except FileNotFoundError:
    st.error('Model dosyasÄ± bulunamadÄ±. LÃ¼tfen doÄŸru yolu kontrol edin.')
    st.stop()

# Tahmin yapma
if st.button('Tahmin Yap'):
    try:
        # Tahmin yapÄ±lmadan Ã¶nce veriyi ve Ã§Ä±ktÄ±yÄ± yazdÄ±r
        st.write("GiriÅŸ verisi:")
        st.write(input_data)  # KullanÄ±cÄ±dan alÄ±nan veriyi ekranda gÃ¶sterir
        
        # Model tahmini
        prediction = model.predict(input_data)
        
        # Tahmin edilen sonucu yazdÄ±r
        st.write("Model Ã‡Ä±ktÄ±sÄ±:")
        st.write(prediction[0])
        
        # KullanÄ±cÄ±ya sonucu gÃ¶ster
        if prediction[0] == 'yes':
            st.success('Evet! MÃ¼ÅŸteri bir vadeli mevduata abone olur.')
        else:
            st.error('HayÄ±r! MÃ¼ÅŸteri bir vadeli mevduata abone olmaz.')
    except Exception as e:
        st.error(f'Tahmin sÄ±rasÄ±nda bir hata oluÅŸtu: {e}')
